<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <BuildDirectory Condition="$(BuildDirectory) == ''">$(MSBuildProjectDirectory)\build</BuildDirectory>
    <PackageDirectory Condition="$(PackageDirectory) == ''">$(BuildDirectory)\package</PackageDirectory>
    <Configuration Condition="$(Configuration) == ''">Release</Configuration>
    <Environment Condition="$(Environment) == ''">Dev</Environment>
    <Version Condition="$(Version) = ''">1.0.0.0</Version>
  </PropertyGroup>

  <PropertyGroup>
    <MSBuildCommunityTasksPath Condition="$(MSBuildCommunityTasksPath) == ''">$(CommonBuildDirectory)</MSBuildCommunityTasksPath>

    <!-- TasksPath is used internally in Sdc Tasks -->
    <TasksPath Condition="$(TasksPath) == ''">$(CommonBuildDirectory)\</TasksPath>
  </PropertyGroup>

  <PropertyGroup>
    <PreBuildTargets>$(PreBuildTargets);InitializeProperties</PreBuildTargets>
    <CleanTargets>$(CleanTargets);CleanBuildDirectory</CleanTargets>
    <PostCleanTargets>$(PostCleanTargets);MakeBuildDirectory</PostCleanTargets>
  </PropertyGroup>

  <Target Name="InitializeProperties">
    <!-- The only reason this has to be dynamic is because TeamCity patches our build script -->
    <StringReplace Input="$(MSBuildProjectName)" OldValue=".proj.teamcity.patch" NewValue="" Condition="$(ProjectName)==''">
      <Output TaskParameter="Output" PropertyName="ProjectName" />
    </StringReplace>
    <CreateProperty Value="$(ProjectName).sln" Condition="$(Solution)==''">
      <Output TaskParameter="Value" PropertyName="Solution" />
    </CreateProperty>
    <CreateProperty Value="$(ProjectName).UnitTests" Condition="$(UnitTestProject)=='' And Exists('$(MSBuildProjectDirectory)\$(ProjectName).UnitTests')">
      <Output TaskParameter="Value" PropertyName="UnitTestProject" />
    </CreateProperty>
    <CreateProperty Value="$(ProjectName).FunctionalTests" Condition="$(FunctionalTestProject)=='' And Exists('$(MSBuildProjectDirectory)\$(ProjectName).FunctionalTests')">
      <Output TaskParameter="Value" PropertyName="FunctionalTestProject" />
    </CreateProperty>
  </Target>

  <Target Name="CleanBuildDirectory">
    <RemoveDir Directories="$(BuildDirectory)" />
  </Target>

  <Target Name="MakeBuildDirectory">
    <MakeDir Directories="$(BuildDirectory)" Condition="!Exists('$(BuildDirectory)')" />
  </Target>
</Project>
